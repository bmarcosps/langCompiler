program(name, datas, funcs) ::= <<
import java.util.*;
public class <name> {
    <datas; separator="\n\n">
    <funcs; separator="\n\n">

    public static void main(String args[]) {
        main();
    }
}
>>

data(name, decls) ::= <<
public static class <name> {
    <decls; separator=";\n">;
}
>>

func(type, name, params, decl, cmd) ::= <<
static <if(type)>List\<Object><else>void<endif> <name>(<params; separator=", ">) {
    List\<Object> _auxReturnList = new ArrayList\<>();
    <if(decl)><decl; separator=";\n">;<endif>
    <cmd>
}
>>

decl(type, name) ::= "<type> <name>"

param(type, name) ::= "<type> <name>"

array_type(type) ::= "<type>[]"
int_type() ::= "int"
float_type() ::= "float"
boolean_type() ::= "boolean"
char_type() ::= "char"
data_type(dataId) ::= "<dataId>"

cmd_list(cmds) ::= <<
<cmds; separator="\n">
>>

if(exp, thn, els) ::= <<
if(<exp>) {
    <thn>
} <if(els)>else {
    <els>
}
<endif>

>>

iterate(exp, cmd) ::= <<
for(int _AUX_<exp.id> = <exp.exp>; _AUX_<exp.id> > 0; _AUX_<exp.id>--) {
    <cmd>
}

>>

read(lval) ::= <<
<lval> = new Scanner(System.in).nextInt();
>>

print(exp) ::= <<
System.out.print(<exp>);

>>

return(returnExps) ::= <<
_auxReturnList.clear();
<returnExps : {exp | _auxReturnList.add(<exp>);
}>
return _auxReturnList;

>>

assign(lval, exp) ::= <<
<lval.lv> =  <exp>;

>>


call_cmd(name, args, exp) ::= <<
_auxReturnList = <name>(<args; separator=", ">);
<exp : {exp | <exp.lv> = (<exp.type>) _auxReturnList.get(0);
_auxReturnList.remove(0);
}>
>>

mul_expr(left_expr, right_expr) ::= "(<left_expr> * <right_expr>)"
div_expr(left_expr, right_expr) ::= "(<left_expr> / <right_expr>)"
mod_expr(left_expr, right_expr) ::= "(<left_expr> % <right_expr>)"
add_expr(left_expr, right_expr) ::= "(<left_expr> + <right_expr>)"
sub_expr(left_expr, right_expr) ::= "(<left_expr> - <right_expr>)"

lt_expr(left_expr, right_expr) ::= "(<left_expr> \< <right_expr>)"
equals_expr(left_expr, right_expr) ::= "(<left_expr> == <right_expr>)"
not_equals_expr(left_expr, right_expr) ::= "(<left_expr> != <right_expr>)"
and_expr(left_expr, right_expr) ::= "(<left_expr> && <right_expr>)"
not_expr(expr) ::= "!<expr>"
min_expr(expr) ::= "-<expr>"

call_expr(name, args, exp) ::= <<(<exp.type>) <name>(<args; separator=", ">).get(<exp.exp>) >>

boolean_expr(val) ::= "<val>"
float_expr(val) ::= "<val>f"
int_expr(val) ::= "<val>"
char_expr(val) ::= "<val>"
null_expr() ::= "null"

new_expr_array(type, expr, squares) ::= "new <type>[<expr>]<squares>"
new_expr_type(type) ::= "new <type>()"


lvalue(name, array) ::= "<name><array>"
array_access(expr) ::= "[<expr>]"
data_access(expr) ::= ".<expr>"

